# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/06_transform.ipynb.

# %% auto 0
__all__ = ['rewrite_match']

# %% ../nbs/06_transform.ipynb 4
from networkx import DiGraph
from .match_class import Match
from .rules import Rule
from .core import NodeName, EdgeName
from typing import *

# %% ../nbs/06_transform.ipynb 6
def _clone_node(graph: DiGraph, node_to_clone: NodeName) -> NodeName:
    pass

# %% ../nbs/06_transform.ipynb 7
def _remove_node(graph: DiGraph, node_to_remove: NodeName):
    pass

# %% ../nbs/06_transform.ipynb 8
def _remove_edge(graph: DiGraph, edge_to_remove: EdgeName):
    pass

# %% ../nbs/06_transform.ipynb 9
def _remove_node_attrs(graph: DiGraph, node: NodeName, attrs_to_remove: set):
    pass

# %% ../nbs/06_transform.ipynb 10
def _remove_edge_attrs(graph: DiGraph, edge: EdgeName, attrs_to_remove: set):
    pass

# %% ../nbs/06_transform.ipynb 11
def _merge_nodes(graph: DiGraph, nodes_to_merge: set[NodeName]) -> NodeName:
    pass

# %% ../nbs/06_transform.ipynb 12
def _add_node(graph: DiGraph, node_to_add: NodeName):
    pass

# %% ../nbs/06_transform.ipynb 13
def _add_edge(graph: DiGraph, edge_to_add: EdgeName):
    pass

# %% ../nbs/06_transform.ipynb 14
def _add_node_attrs(graph: DiGraph, node: NodeName, attrs_to_add: dict):
    pass

# %% ../nbs/06_transform.ipynb 15
def _add_edge_attrs(graph: DiGraph, edge: EdgeName, attrs_to_add: dict):
    pass

# %% ../nbs/06_transform.ipynb 17
# check out regraph files: regraph/graphs.py, regraph/rules.py, regraph/utils.py

def rewrite_match(input_graph: DiGraph, match: Match, rule: Rule):
  
  mapping = match.mapping
  mapping_p_graph = {}

  # clone nodes (including their edges and attributes)  
  # delete nodes and preserve others
  # delete edges
  # remove node attributes
  # remove edge attributes

  # merge nodes
  # add nodes
  # add edges
  # add node attributes
  # add edge attributes
  pass
