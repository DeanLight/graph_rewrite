# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_matcher.ipynb.

# %% auto 0
__all__ = ['attributes_exist', 'find_matches']

# %% ../nbs/02_matcher.ipynb 1
from networkx import DiGraph
from networkx.algorithms import isomorphism # check subgraph's isom.
import itertools # iterating over all nodes\edges combinations
from typing import *

# %% ../nbs/02_matcher.ipynb 4
def attributes_exist(actual_attr: dict, pattern_attr: dict) -> bool:
    # for attr_name in pattern_attr:
    #   if actual_attr doesn't contain an attribute named attr_name:
    #       return False, as actual object doesn't match the pattern
    # if all attributes were found, return True
    pass

# %% ../nbs/02_matcher.ipynb 6
def find_matches(input: DiGraph, patterns_list: List[DiGraph]) -> List[Tuple[Dict[str, Hashable], DiGraph]]:
    # initialize true_matches, an empty list

    # for pattern in patterns_list:    
        # 1) Narrow down the search space by removing irrelavant nodes
        # initialize matching_nodes, an empty set
        # for each pair of actual_node, pattern_node:
        #   if attribute_exist(actual_node attributes, pattern_node attributes):
        #       add actual_node to matching_nodes
        # reduced_input = subgraph of input, consisting of matching_nodes an all edges connected to them

        # 2) Find isomorphic matches (match pattern's structure ONLY)
        # initialize isom_matches, an empty list
        # for each possible set of nodes in reduced_input, of same size as number of nodes in pattern:
        #      nodes_subg = subgraph of reduced_input, consisting only of the current set of nodes and connected edges
        #      for each possible set of edges in nodes_subg, of same size as number of edges in pattern:
        #           subg = a DiGraph consisting of current sets of nodes and edges
        #           use isomorphism.DiGraphMatcher in order to find all isomorphisms from pattern to subg
        #           for each isomorphism, add the mapping it defines along with the current nodes_subg to isom_matches

        # 3) Find true matches among isomorphisms (match pattern's attributes)
        # for every mapping, subgraph in isom_matches:
        #   for every pattern_node, corresponding original_node in mapping:
        #       if not attributes_exist(original_node attr in subgraph, pattern_node attr in pattern):
        #           continue to next isom_match, as the current one doesn't match the pattern
        #   for every pattern_edge, corresponding original_edge induced from the nodes in mapping:
        #       if not attributes_exist(original_edge attr in subgraph, pattern_node attr in pattern):
        #           continue to next isom_match for the same reason as above
        #   if reached here, then we found a true match
        #   add (mapping, pattern) to true_matches, and continue to next isom_match

    # return true_matches
    pass
