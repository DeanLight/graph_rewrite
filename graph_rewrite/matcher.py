# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_matcher.ipynb.

# %% auto 0
__all__ = ['FilterFunc', 'Constant', 'find_intersecting_nodes', 'find_collection_matches', 'find_matches']

# %% ../nbs/03_matcher.ipynb 4
from itertools import product, permutations
from typing import Tuple, Iterator

# %% ../nbs/03_matcher.ipynb 7
from typing import *
from networkx import DiGraph
from networkx.algorithms import isomorphism # check subgraph's isom.
import itertools # iterating over all nodes\edges combinations

from .core import NodeName, _create_graph, draw
from .lhs import lhs_to_graph
from .match_class import Match, mapping_to_match, is_anonymous_node,draw_match

# %% ../nbs/03_matcher.ipynb 10
# TODO: Ensure we separate between constant attributes and existence checks (constants).
# a[id] -> existence check (can be checked before combinatorics)
# a[id=Constant(3)] -> constant value check (can be checked before combinatorics)

# TODO: Email Dean regarding the parser ability to support constant values in the pattern graph - it is currently not supported, and so all constant values will still
#  result in a None value in the pattern graph.
class Constant:
    def __init__(self, value):
        self.value = value


def _attributes_match(pattern_attrs: dict, input_attrs: dict) -> bool:
    """
    Check if the input attributes match the pattern attributes.

    This function supports both:
    - Existence checks (ensures that required attributes exist).
    - Constant value checks (ensures that constant values match).

    Args:
        pattern_attrs (dict): Attributes of the pattern (node or edge).
        input_attrs (dict): Attributes of the input (node or edge).

    Returns:
        bool: True if the input attributes match the pattern attributes, False otherwise.
    """
    for attr_name, attr_value in pattern_attrs.items():
        if attr_name not in input_attrs:  # If the attribute does not exist, return False
            return False
        
        if attr_value is None: # If the attribute exists, but the value is None, continue to the next attribute
            continue

        # TODO: This is not supported yet due to the parser not supporting constant values in the pattern graph - we will never reach this point, and it is implemented for future use, 
        # once the parser supports it.
        if isinstance(attr_value, Constant):  # If the attribute exists, and the value is a constant, check if the value matches
            if input_attrs[attr_name] != attr_value.value:
                return False

    return True

# %% ../nbs/03_matcher.ipynb 12
def _find_input_nodes_candidates(pattern_node: NodeName, pattern: DiGraph, input_graph: DiGraph) -> set[NodeName]:
    """
    Given a pattern node and an input graph, return a set of input graph nodes that:
    - Contain the required attributes of the pattern node, including constant value checks (if specified) and existence checks (if no value is specified / no constant value).
    - Have at least one edge with matching attributes for each edge of the pattern node that has attributes specified.

    Args:
        pattern_node (NodeName): The pattern node.
        pattern (DiGraph): The pattern graph.
        input_graph (DiGraph): The input graph.

    Returns:
        set[NodeName]: A set of input graph nodes that match the required attributes and have at least one matching edge.
    """

    pattern_node_attrs = pattern.nodes[pattern_node]

    if "_id" in pattern_node_attrs: #TODO: understand why this is here (_id)
        input_node_id = pattern_node_attrs.pop("_id")
        input_nodes_to_check = [input_node_id]
    else:
        input_nodes_to_check = list(input_graph.nodes)

    # Filter nodes by attributes first
    candidate_nodes = {
        input_node
        for input_node in input_nodes_to_check
        if _attributes_match(pattern_node_attrs, input_graph.nodes[input_node])
    }

    return candidate_nodes

# %% ../nbs/03_matcher.ipynb 13
def _filter_edge_candidates(input_graph: DiGraph, pattern: DiGraph, src_pattern_node: NodeName, dst_pattern_node: NodeName, 
                               src_candidates: Set[NodeName], dst_candidates: Set[NodeName]) -> Set[Tuple[NodeName, NodeName]]:
    """
    Filter the input node candidates for two pattern nodes by checking if the edges between them in the input graph exist
    and match the pattern edge attributes.

    This function reduces the number of candidate pairs before generating assignments in _find_pattern_based_matches.

    Args:
        input_graph (DiGraph): The input graph.
        pattern (DiGraph): The pattern graph (provides the edge attributes).
        src_pattern_node (NodeName): The source pattern node.
        dst_pattern_node (NodeName): The destination pattern node.
        src_candidates (Set[NodeName]): Current candidates for the source pattern node.
        dst_candidates (Set[NodeName]): Current candidates for the destination pattern node.

    Returns:
        Set[Tuple[NodeName, NodeName]]: A set of valid candidate edge assignments (source, destination).
    """
    pattern_edge_attrs = pattern.get_edge_data(src_pattern_node, dst_pattern_node, default={})

    # Filter input edge candidates for the pattern edge by checking if the input edge exists and matches the pattern edge attributes (if specified)
    valid_edge_candidates = {
        (src_candidate, dst_candidate)
        for src_candidate, dst_candidate in product(src_candidates, dst_candidates)
        if (src_candidate, dst_candidate) in input_graph.edges and
           _attributes_match(pattern_edge_attrs, input_graph.get_edge_data(src_candidate, dst_candidate, default={}))
    }

    return valid_edge_candidates

# %% ../nbs/03_matcher.ipynb 15
def _can_add_edge_candidates_to_assignment(src_candidate, dst_candidate, partial_assignment, src_pattern_node, dst_pattern_node):
    """
    Helper function to check if a pair of candidate nodes for an edge can be added to a partial assignment
    without conflicting with the existing node assignments.

    Args:
        src_candidate (NodeName): Candidate for the source pattern node.
        dst_candidate (NodeName): Candidate for the destination pattern node.
        partial_assignment (dict): Current partial assignment mapping pattern nodes to input nodes.
        src_pattern_node (NodeName): The source pattern node in the pattern graph.
        dst_pattern_node (NodeName): The destination pattern node in the pattern graph.

    Returns:
        bool: True if the edge candidates can be added without conflict to the current assignment, False otherwise.
    """
    return (
        src_candidate not in partial_assignment.values() and
        dst_candidate not in partial_assignment.values() and
        (src_pattern_node not in partial_assignment or partial_assignment[src_pattern_node] == src_candidate) and
        (dst_pattern_node not in partial_assignment or partial_assignment[dst_pattern_node] == dst_candidate)
    )

# %% ../nbs/03_matcher.ipynb 16
def _find_pattern_based_matches(graph: DiGraph, pattern: DiGraph) -> Iterator[Tuple[DiGraph, Dict[NodeName, NodeName]]]:
    """
    Find all subgraphs in the input graph that match the given pattern graph based on both structure (nodes and edges)
    and attributes (existence of attributes or constant value checks).

    A subgraph is considered isomorphic if it has the same structure (nodes and edges) as the pattern graph
    and the attributes of the nodes and edges match the specified attributes in the pattern graph.

    Args:
        graph (DiGraph): The graph to search for matches.
        pattern (DiGraph): The pattern graph representing the structure and attributes to match.

    Yields:
        Iterator[Tuple[DiGraph, Dict[NodeName, NodeName]]]: Tuples of (subgraph, mapping),
        where subgraph is the matched subgraph, and mapping is a dictionary mapping nodes in the
        subgraph to nodes in the pattern.
    """
    
    single_pattern_nodes = [n for n in pattern.nodes if pattern.in_degree(n) == 0 and pattern.out_degree(n) == 0]
    single_pattern_nodes_to_input_candidates = {n: _find_input_nodes_candidates(n, pattern, graph) for n in single_pattern_nodes}

    edge_candidates = {}

    for src_pattern_node, dst_pattern_node in pattern.edges:
        src_candidates = _find_input_nodes_candidates(src_pattern_node, pattern, graph)
        dst_candidates = _find_input_nodes_candidates(dst_pattern_node, pattern, graph)
        edge_candidates[(src_pattern_node, dst_pattern_node)] = _filter_edge_candidates(graph, pattern, src_pattern_node, dst_pattern_node, src_candidates, dst_candidates)

    # Generate partial assignments based on valid edge candidates
    partial_assignments = set()

    for (src_pattern_node, dst_pattern_node), valid_edge_candidates in edge_candidates.items():
        new_assignments = set()

        for src_candidate, dst_candidate in valid_edge_candidates:
            for partial_assignment in partial_assignments or [{}]:
                if _can_add_edge_candidates_to_assignment(src_candidate, dst_candidate, partial_assignment, src_pattern_node, dst_pattern_node):
                    new_assignment = partial_assignment.copy()
                    new_assignment[src_pattern_node] = src_candidate
                    new_assignment[dst_pattern_node] = dst_candidate
                    new_assignments.add(frozenset(new_assignment.items())) # ensuring that once a partial assignment is created, it can't be altered accidentally in subsequent steps - the goal is to maintain a set of unique assignments

        if not new_assignments: # If no new assignments are found for a pair of pattern nodes, it means that the pattern cannot be matched
            return
        partial_assignments = new_assignments


    # Add single node candidates to the assignments
    for pattern_node in single_pattern_nodes:
        single_node_candidates = single_pattern_nodes_to_input_candidates[pattern_node]
        new_assignments = set()

        for candidate in single_node_candidates:
            for partial_assignment in partial_assignments or [{}]:
                if candidate not in dict(partial_assignment).values():
                    new_assignment = dict(partial_assignment).copy()
                    new_assignment[pattern_node] = candidate
                    new_assignments.add(frozenset(new_assignment.items())) # again, ensuring that the assignment is unique and can't be altered accidentally in subsequent steps

        partial_assignments = new_assignments

    # Filter and yield valid subgraphs (at this point we have all possible assignments, and there shouldn't be any non-isomorphic subgraphs - I kept the check for safety) 
    for assignment in partial_assignments:
        assignment_dict = dict(assignment)
        subgraph = graph.subgraph(assignment_dict.values())

        if isomorphism.is_isomorphic(subgraph, pattern, node_match=_attributes_match, edge_match=_attributes_match):
            yield subgraph, assignment_dict

# %% ../nbs/03_matcher.ipynb 19
FilterFunc = Callable[[Match], bool]

# %% ../nbs/03_matcher.ipynb 22
def _filter_duplicated_matches(matches: list[Match]) -> Iterator[Match]:
    """Remove duplicates from a list of Matches, based on their mappings. Return an iterator of the matches without duplications.

    Args:
        matches (list[Match]): list of Match objects

    Yields:
        Iterator[list[Match]]: Iterator of the matches without duplications.
    """

    yield from set(matches)
    # TODO: optimization - using set involves instantiation of all matches, check if we can avoid it

# OLD
'''
    new_list = []
    for match in matches:
        if match not in new_list:
            new_list.append(match)
            yield match
'''



# %% ../nbs/03_matcher.ipynb 23
# Finds 
def find_intersecting_nodes(match: dict, collection_pattern: DiGraph) -> set:
    # Step 1: Extract all node names from self._nodes and the node collections (if they do not exist yet, they will be empty - no harm is done).
    # Step 2: Find all nodes with the same name in collection_pattern - these are the intersecting nodes.
    # Step 3: Return all matching node names.
    if collection_pattern is None:
        return set()
    collection_nodes = set(collection_pattern.nodes)
    match_nodes = set(match.keys())
    return collection_nodes & match_nodes

# This function is used to find all the collections that match the pattern, by comparing the intersected nodes
def find_collection_matches(input_graph: DiGraph, collecions_pattern: DiGraph, intersected_nodes_matches: List):
    g_id = input_graph.copy()
    for mapping, intersected_nodes in intersected_nodes_matches:
        pattern_id = collecions_pattern.copy()
        for node in intersected_nodes:
            pattern_id.nodes[node]['_id'] = mapping[node]

        # Find all structural matches (isomorphisms)
        attribute_matches =  [match for match in _find_structural_matches(g_id, pattern_id)]
        # Find matches with attributes among isoms (match pattern's attributes)
        #attribute_matches = [mapping for (subgraph, mapping) in isom_matches if _does_isom_match_pattern((subgraph, mapping), pattern_id)]

        # Create one mapping for the collections out of attribute_matches
        collections_mapping = {}
        for d in attribute_matches:
            for collectionName, value in d.items():
                if collectionName in intersected_nodes:
                    continue
                if collectionName not in collections_mapping:
                    collections_mapping[collectionName] = set()
                collections_mapping[collectionName].add(value)
        if collecions_pattern.number_of_nodes() == 0 or collections_mapping != {}:
            yield mapping, collections_mapping



# %% ../nbs/03_matcher.ipynb 25
# Dean's suggestion: make sure there are no "duplicated mappings" of different node names to the same node - make sure there is no case where
# one is deleted and the other is not
# This also should be done for attributes
# Check how regraph does it, and if there is no such thing, check the mathematically correct way to do it
def find_matches(input_graph: DiGraph, pattern: DiGraph, collections_pattern: DiGraph = None, condition: FilterFunc = lambda match: True) -> Match:
    """Find all matches of a pattern graph in an input graph, for which a certain condition holds.
    That is, subgraphs of the input graph which have the same nodes, edges, attributes and required attribute values
    as the pattern defines, which satisfy any additional condition the user defined.

    Args:
        input_graph (DiGraph): A graph to find matches in
        pattern (DiGraph): A pattern graph produced by the LHS Parser.
        condition (FilterFunc, optional): A function which recives a Match objects, and checks whether some condition holds
            for the corresponding match. Defaults to a condition function which always returns True.

    Yields:
        Iterator[Match]: Iterator of Match objects (without duplications), each corresponds to a match of the pattern in the input graph.
    """

    # Narrow down search space by keeping only input-graph nodes that have any attribute in common as some pattern node
    # And reduce the input graph to the matching nodes + connected edges
    matching_nodes = [n for (n, attrs) in input_graph.nodes(data=True) if _does_node_match_pattern(attrs, pattern)]
    reduced_input_g = input_graph.subgraph(matching_nodes).copy()    

    # Remove all edges that are not between matching nodes or do not match the pattern by their attributes from the reduced graph
    reduced_input_g.remove_edges_from([edge for edge in reduced_input_g.edges if not _does_edge_match_pattern(reduced_input_g.edges[edge], pattern)])
        
    # Find all structural matches (isomorphisms), including attributes
    attribute_matches =  [match for match in _find_structural_matches(reduced_input_g, pattern)]

    # Find all collections that match the pattern
    if collections_pattern is not None:
        intersected_nodes_matches = [(mapping, find_intersecting_nodes(mapping, collections_pattern)) for mapping in attribute_matches]
        collection_matches = [(mapping, collections_mapping) for mapping, collections_mapping in 
                            find_collection_matches(reduced_input_g, collections_pattern, intersected_nodes_matches)]
    else:
        collection_matches = [(mapping, dict()) for mapping in attribute_matches]

    # construct a list of Match objects. Note that the condition is checked on a Match that includes anonymous nodes (as it might use it)
    # but the Match that we return does not include the anonymous parts.
    # Therefore, we first construct a list of tuples - the first is the mapping with anonymous, the second isn't
    matches_list = [(mapping_to_match(input_graph, pattern, collections_pattern, mapping, collection_mapping, filter=False),
                      mapping_to_match(input_graph, pattern, collections_pattern, mapping, collection_mapping)) 
                    for mapping, collection_mapping in collection_matches]
    # Then filter the list, to contain only the filtered match whose unfiltered version matches the condition
    filtered_matches =  [filtered_match for (unfiltered_match, filtered_match) in matches_list if condition(unfiltered_match)]
    # And finally, remove duplicates (might be created because we removed the anonymous nodes)
    yield from _filter_duplicated_matches(filtered_matches)
