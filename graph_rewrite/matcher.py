# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_matcher.ipynb.

# %% auto 0
__all__ = ['find_matches']

# %% ../nbs/02_matcher.ipynb 5
from networkx import DiGraph
from networkx.algorithms import isomorphism # check subgraph's isom.
import itertools # iterating over all nodes\edges combinations
from typing import *

# %% ../nbs/02_matcher.ipynb 7
def find_matches(input: DiGraph, pattern: DiGraph) -> List[Dict[str, Hashable]]:
    """
    Finds matches of a pattern graph inside an input graph, and returns mappings for each match.

    Parameters
    ----------
    input:
        A DiGraph to be scanned for finding pattern matches.
    pattern:
        A DiGraph representing a graph pattern, in the same format as the output of Parser module.

    Returns
    -------
    A list of str->hashable dictionaries:
        List of mappings from pattern nodes names to actual nodes names.
    """
    def attributes_exist(original: dict, pattern: dict):
        for attr_name, _ in pattern.items():
            if attr_name not in original:
                return False
        return True

    # Narrow down search space by removing irrelavant nodes
    matching_nodes = set()
    for (_, pattern_attr) in pattern.nodes(data=True):
        for (graph_node, graph_attr) in input.nodes(data=True):
            if attributes_exist(graph_attr, pattern_attr):
                matching_nodes.add(graph_node)
    reduced_input: DiGraph = input.subgraph(matching_nodes)

    isom_matches = []
    for sub_nodes in itertools.combinations(reduced_input.nodes, len(pattern.nodes)):
        nodes_subg: DiGraph = reduced_input.subgraph(sub_nodes) # only the selected nodes and connected edges
        for sub_edges in itertools.combinations(nodes_subg.edges(data=True), len(pattern.edges)): # subset of the connected edges
            # Create a subgraph with selected edges and nodes
            subg = DiGraph()
            subg.add_nodes_from(list(nodes_subg.nodes(data=True)))
            subg.add_edges_from(list(sub_edges))

            # Find structural matches with the selected edges and nodes
            matcher = isomorphism.DiGraphMatcher(pattern, subg)
            for isom_mapping in matcher.isomorphisms_iter():
                isom_matches.append((nodes_subg, isom_mapping))

    # Find true matches among isoms (matche pattern's attributes)
    true_matches = []
    for (subgraph, mapping) in isom_matches:
        is_match = True
        # check nodes match
        for (pattern_node, original_node) in mapping.items():
            if not attributes_exist(subgraph.nodes[original_node], pattern.nodes[pattern_node]):
                is_match = False
                break
        if not is_match:
            continue

        # check edges match
        for edge in pattern.edges(data=True):
            pattern_attr = edge[2]
            original_attr = subgraph.edges[mapping[edge[0]], mapping[edge[1]]]
            if not attributes_exist(original_attr, pattern_attr):
                is_match = False
                break
        if is_match:
            true_matches.append(mapping)

    return true_matches
